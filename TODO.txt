/*
MetaC Preprocessor - A macro processor for preprocessing usage.
Copyright (C) 2022 Jared A. Maddox

This program is free software; you can redistribute it and/or modify it
under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the:
	Free Software Foundation, Inc.,
	59 Temple Place, Suite 330,
	Boston, MA 02111-1307 USA
*/

Special note:
	The FAILED * FUNC macros should probably be supplemented with versions
		that implement the standard assigned-and-if() construct. That will save
		MANY lines.
	Probably need to check all the files for *_refid variables, and delete them.
		Caught some, but probably not all.

Aaaand the file is already out of date. Have been using already-defined stuff
for the FAILED * FUNC macro note above. So, lots of line numbers below are
off...

Need to add a "insert break" macro to LibAndria4, something like:
	"#define LIB4_OPS_BREAKSWITCH( ... ) break" for use with
		token.h:TOKEN_EQUALS_SIMPLECOMP_BODY().

freshline_directives.c looks likely to just be an older version of exec.c and
macroargs.c, so figure out if it should be deleted.

There may be a whole load of stuff that uses MONADICFAILURE() by unknowingly
passing it a lib4_failure_result under the mistaken impression that it's an int.

Make an example for how to use peek()'s offset correctly.

All sorts of stuff will need to be rechecked to ensure that e.g. line numbers
	are being set correctly in token_head.

!!!VITAL NOTE!!! : Keep an eye out for ->toktype == TOKTYPE_PARSEBREAK, because
	THAT means that we've reached the end of a localized batch of replacement
	(or supplemental...) tokens, and thus whatever we were doing needs to start
	dropping levels of nesting until something that ACTUALLY knows HOW ELSE to
	react is reached.

!!!VITAL NOTE!!! : For the sake of regularity, the execution of macros
	realistically probably needs to be handled sorta like "freshlines"- in
	particular, the "get token" functionality needs to track "the last
	macro-izable token" that passed through (which means that I need to decide
	what those EVEN ARE), so that if a macro invocation is detected, it can
	look at that value (or probably "adopt" or "subsume" that value when the
	start of the invocation is detected) to figure out what exactly should
	REALLY be done.
	Gonna need rewind capabilities to make this reliably work...


Will want a command line option to output license info. GPL suggestion is
	similar to the following:
		Gnomovision version 69, Copyright (C) year name of author Gnomovision
		comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is
		free software, and you are welcome to redistribute it under certain
		conditions; type `show c' for details.


NEEDED: a file to localize the preprocessor directives that are NOT freshline
	directives.

token.h:
	Need some notes on *_INVALID vs *_OTHER
	"was_freshline" has been dropped from token_head, and "src", "line", and
		"column" have been added. I think I've fixed all of the references,
		but check again at home.
		Need to add "was freshline" back, but as a flag. Adding some
		functions to test for the time being: just update them when
		appropriate.
	Add triple-ellipsis support here, then in simplelex.c, then in
		pack_upparclose() inside eval.c.
token.c:
	Should is_stdtoken() return 0 on whitespace or not?

eval.c:
	conclude_try_directive() dispatches to the same next stage as
		try_directive() if it doesn't detect a name as the appropriate token,
		but it should actually dispatch first to a dedicated function for
		things like preprocessor math, and that should dispatch to an error
		reporter if it can't find a match. So, fix that failing.
	on_good_comma_[] in pack_upparclose() should probably be shoving the
		paired tokens into a tokenbranch, so fix that.
	pack_pardefclose() drops results when they are still needed: do something
		to fix that.
	tokens2macrocllaval_parr() has a '0' case handling is_stdtoken(): replace
		the handler with something better.
	token2char_parr() should be separated enough for it to be used outside of
		the token2char_parr() system: I don't know thast it'll be useful, but
		the void* arg will make it easy enough.
	tokens2macrocllaval_parr_onerr_() should be modified to tolerate bad
		inputs, but this can be left for sometime later, since that'll just
		increase resilience against e.g. typos and bugs.
	The "build tokengroup" part of parseheart_layer1_enter() should be pushed
		back to a calling loop (or even better, the caller of the calling
		loop), so that there won't be any "surviving state" to clean up, or
		signal the existence of, or...

echo_tokens.c: Both emit_C_stringifier() and *_concatenator() need to be
	finished up. In particular, their token_head instances need some additional
	things set in them, some of those DYNAMICALLY.

tokenization.txt:
	Needs better documentation of invoke_dealloctoken().

err.c:
	might need some sort of debug/release mode?

demo_errs.c:

lexalike.c:
	NEW NOTE!: Add a ",=" operator/token for non-scalar (sorta non-math,
		except that adding elements to a matrix could be math, but IS NOT
		scalar, and IS an example of what this should do) accumulation.
		ALSO: add the "spaceship" operator ("<=>") and it's "inverse"
		(">=<") to support other languages more easily.
	SUPPORT NOTE!: Need some way to turn particular token accumulations
		on/off in the lex stage, so that e.g. "starship" doesn't screw
		with other stuff.
	any functions left that belong elsewhere?
	Needs trigraph support added in.
    assemble_token() has now had the "was_freshline" stuff removed from it,
		still need to check other stuff.
	token_queue_push() needs to have some "max file size" testing added to
        one of it' conditionals. Same for token_queue_shufflepush() and
        token_queue_shuffle2queue().
	tokenize_char() has a spot for "universal encoding", but doesn't actually
		do anything, assuming that things should just be 1-to-1. So, should
		probably expand that support to actually do something... eventually.
	tokenize_char() seems to require Microsoft-style newlines instead of just
		supporting them- that needs to be fixed.
	htab_size, vtab_size, and ffeed_size need to be modifiable via a pragma or
		similar directive. Obviously, supporting this will require that at
		least that directive actually exist.
	tokenize_char() and *__accumulate() should probably specially handle EOF.
	Whenever the support for modifying htab_size, vtab_size, and ffeed_size
		gets added, then they'll need to get added to the fileprogress{} type,
		so that what's in one won't be overwritten by a later file inclusion.
	The token-queue system has no way to track if or which macro that tokens
		have come from, so that needs to get changed so that we can avoid
		cyclic macro invocations.
	The token_touint_*() functions deserve a STANDARD "out of range" error.
	The "files" initializer in token_queue_init() needs to be improved.
	The "files" deinitializer in token_queue_deinit() needs to be improved.
	tokenize_char__peekchar() deserves a new STANDARD error message for it's
		GENERICMISMATCH case: particularly, a pointer variation of the
		"int mismatch" stuff that already exists.
	tokenize_char__charin()'s GENERICMISMATCH case could use some better error
		reporting.
    Random functions aren't complete: check for '???'.
lexalike.h:
	Will need to be synced with some lexalike.c changes.
	is_freshline() should be declared elsewhere- move it.
		Actually, is that true?

extrachar.c:

source.c:
	deinit() doesn't clear any non-root_src instances of source{} from
		"sources": this needs to be changed, particularly since
		discard_source() should do most of the work already..
	The final RETURNFAILURE() in charin() needs a proper failure value.

basics.c:
	Line 249 has a bit of error reporting that's probably worthy of it's own
		custom error reporter.
	I think that the two/three search functions (preproc_search2(),
		preproc_search1(), and gentyped_search()) should be replaced with
		similar functions that have more thought applied to them. They seem
		like decent references, but not directly suitable for use.

components.h:

components.c:
	Starting at line 80, "default" isn't really defined.
	Line 128, searchstack_deinit() isn't filled out at all.
	components_sequencedsearchproceed() has a note saying it needs to be
		reviewed.

macroargs.c:
	This has been freshly split off of components.c- need to go through to
		double check things.
	Pulled the shufflequeue stuff out for an exec.c file.

exec.c:
	Freshly split- needs review.
	Should shufflequeue_macro_run() REALLY pop the list of arguments from
		macro_args? Where does that value even get pushed?
	Does TOKTYPE_TOKENGROUP_MACROCALL execute macros AND directives, or
		just macros? I believe that both SHOULD be done, but that doesn't mean
		that it IS done...
	Also, has support for TOKTYPE_TOKENGROUP_MACROTOKEN_INDIRECTION been added?
	Should "_TOKENGROUP_" be present in the ->toktype names for this file at
		all?
	You know what? Just review the entire damned file.
exec.h:
	The whole file needs to be examined for rewriting.
	Line 107 has a "???" in a struct definition.

freshline_directives.c:
	This frankly hasn't REALLY been written yet. It was a sort-of scratchpad
		for e.g. macroargs.c, because it basically NEEDS some stuff like that
		in order to know how the directives need to work.

complexlex.c:
	I was somehow uncertain about the "complex" call near the end of
		smart_dealloc_token().
	dealloc_tokengroup() has several error returns with null function pointers
		instead of a pointer to end_func()... is that desirable?
	invoke_dealloctoken() appears to have an inverted test (the handler SHOULD
		BE non-null!), and matching wrong error report.
	On review, TOKTYPE_NUMBER_UINT shouldn't need special deallocation, but I
		don't think it gets built yet.
	build_tokenbranch() takes an element count, but never uses it... and has no
		reason to take it anyways. Remove it, and fix the use of the function
		wherever it's invoked.
	The comment accumulator needs to "heed" a "invocation builder", so that
		macro calls can properly be handled inside comments.
		Added: or maybe I'll just move that into the token source? Though
		I'm currently favoring leaving comments unmolested...
		Correction: there's no damned reason to accumulate comments until
		the output phase, what am I even doing? And yeah, macros should modify
		them. Fix this.
	accumulate_whitespace() currently will just throw errors if a
		non-whitespace token is pointed to by the top of the stack- that needs
		to change for the sake of making it more convenient to use.
complexlex.h:

simplelex.c:
	Line 410: This default in numberentry_lex() can technically use a character
		verifier.
	numberentry_lex() drops characters for some number formats- change that.
	Line 621: A note in brackop_lex() that it would be good to verify the value
		of th.toktype.
	Make certain that the inclusive or stuff is properly implemented, instead
		of all being "and" variations...
	Aren't the first 2 switchs in syms_lex() using the wrong character? Pretty
		sure it should be testing a character that it SHOULD BE retrieving from
		under the token_head... and instead it gets an extrachar that it
		doesn't need yet, and gets another later. Basically, everything
		involving the "a" variable is suspect.
simplelex.h:
	Need some note on unused vs other chars.

headers.h:
	Need to verify that all the relevant headers are included. Maybe make
		sub-headers for modularity?
	Note: the relevant headers are now definitely NOT up to date.

stack.c:
	Line 183: changed the return values, need to check if this breaks anything.
		Note: have changed A LOT of return values. This SHOULDN'T break things,
		but it MIGHT. Best to check. This file shouldn't have problems- fixing
		it is part of why there's lots of changes...
	Line 593: There's a note here about verifying the proper use of
		(token_head*)->length.
	Gonna need to modify the push/peek/pop code for token_head, because it's
		format has changed to support filename/line number info.
	
	New:
	Added an int to stackpair, and several functions to the top of the file.
		This will throw off line numbers. Again.
	Check to see if the new stackpair->run member should be initialized
		anywhere.

tokenmatching.c:
	Line 406: Should this REALLY be fixed instead of deleted? I think I may
		have moved past this.
tokenmatching.h:
	genericnamed_retframe isn't usefully compatible with genname_parr, and
		various functions require genname_parr; look at doing something to
		compensate for that, so that genericnamed_retframe can make itself
		useful. See also generictyped_retframe.


Finally: Finish the whole preprocessor!
