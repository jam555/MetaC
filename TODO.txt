Special note:
	The FAILED * FUNC macros should probably be supplemented with versions that implement the standard assigned-and-if() construct. That will save MANY lines.
	Probably need to check all the files for *_refid variables, and delete them. Caught some, but probably not all.

Aaaand the file is already out of date. Have been using already-defined stuff for the FAILED * FUNC macro note above. So, lots of line numbers below are off...

freshline_directives.c looks likely to just be an older version of exec.c and macroargs.c, so figure out if it should be deleted.

There may be a whole load of stuff that uses MONADICFAILURE() by unknowingly passing it a lib4_failure_result under the mistaken impression that it's an int.

Make an example for how to use peek()'s offset correctly.

!!!VITAL NOTE!!! : For the sake of regularity, the execution of macros
	realistically probably needs to be handled sorta like "freshlines"- in
	particular, the "get token" functionality needs to track "the last
	macro-izable token" that passed through (which means that I need to decide
	what those EVEN ARE), so that if a macro invocation is detected, it can
	look at that value (or probably "adopt" or "subsume" that value when the
	start of the invocation is detected) to figure out what exactly should
	REALLY be done.
	Gonna need rewind capabilities to make this reliably work...


tokenization.txt:
	Needs better documentation of invoke_dealloctoken().

err.c:
	might need some sort of debug/release mode?

demo_errs.c:

lexalike.c:
	any functions left that belong elsewhere?
	Updated the one in front of tokenize_char(), but there may still be some
		old comments in the file- do a review to see if any can be found.
	Needs trigraph support added in.
	tokenize_char() needs to be modified to provide file/line info to allow the
		origin of text to be tracked for error-reporting and macro programming
		purposes.
	The token-queue system has no way to track if or which macro that tokens
		have come from, so that needs to get changed so that we can avoid
		cyclic macro invocations.
	The token_touint_*() functions deserve a STANDARD "out of range" error.
	The "files" initializer in token_queue_init() needs to be improved.
	The "files" deinitializer in token_queue_deinit() needs to be improved.
	tokenize_char__peekchar() deserves a new STANDARD error message for it's
		GENERICMISMATCH case: particularly, a pointer variation of the
		"int mismatch" stuff that already exists.
	tokenize_char__charin()'s GENERICMISMATCH case could use some better error
		reporting.
lexalike.h:
	Will need to be synced with some lexalike.c changes.
	is_freshline() should be declared elsewhere- move it.
		Actually, is that true?

extrachar.c:
	Needs some changes to support/use the file/line info that needs to be added
		to lexalike.c. The needed changes have been made in source.h/.c, but
		they need to be carried over to extrachar now... though looks like
		lexalike.c comes first.

source.c:
	deinit() doesn't clear any non-root_src instances of source{} from
		"sources": this needs to be changed, particularly since
		discard_source() should do most of the work already..
	charin() has an incomplete error report near it's end- need to actually
		return an error instead of falling through to success.

basics.c:
	Line 249 has a bit of error reporting that's probably worthy of it's own
		custom error reporter.
	I think that the two/three search functions (preproc_search2(),
		preproc_search1(), and gentyped_search()) should be replaced with
		similar functions that have more thought applied to them. They seem
		like decent references, but not directly suitable for use.

components.h:
	Is the stuff at the bottom of the file supposed to be there?

components.c:
	Starting at line 80, "default" isn't really defined.
	Line 128, searchstack_deinit() isn't filled out at all.
	components_sequencedsearchproceed() has a note saying it needs to be
		reviewed.

macroargs.c:
	This has been freshly split off of components.c- need to go through to
		double check things.
	Pulled the shufflequeue stuff out for an exec.c file.

exec.c:
	Freshly split- needs review.
	Should shufflequeue_macro_run() REALLY pop the list of arguments from
		macro_args? Where does that value even get pushed?
	Does TOKTYPE_TOKENGROUP_MACROCALL execute macros AND directives, or
		just macros? I believe that both SHOULD be done, but that doesn't mean
		that it IS done...
	Also, has support for TOKTYPE_TOKENGROUP_MACROTOKEN_INDIRECTION been added?
	Should "_TOKENGROUP_" be present in the ->toktype names for this file at
		all?
	You know what? Just review the entire damned file.
exec.h:
	The whole file needs to be examined for rewriting.
	Line 107 has a "???" in a struct definition.

freshline_directives.c:
	This frankly hasn't REALLY been written yet. It was a sort-of scratchpad
		for e.g. macroargs.c, because it basically NEEDS some stuff like that
		in order to know how the directives need to work.

complexlex.c:
	Line 159: Apparently I was uncertain about something here. Best to check.
	Line 613: A note about a function set/function that should be built. Might
		be further down in same file already...
	invoke_dealloctoken() appears to have an inverted test (the handler SHOULD
		BE non-null!), and matching wrong error report.
	On review, TOKTYPE_NUMBER_UINT shouldn't need special deallocation, but I
		don't think it gets built yet.
	build_tokenbranch() takes an element count, but never uses it... and has no
		reason to take it anyways. Remove it, and fix the use of the function
		wherever it's invoked.
	The comment accumulator needs to "heed" a "invocation builder", so that
		macro calls can properly be handled inside comments.
		Added: or maybe I'll just move that into the token source? Though
		I'm currently favoring leaving comments unmolested...
	accumulate_whitespace() currently will just throw errors if a
		non-whitespace token is pointed to by the top of the stack- that needs
		to change for the sake of making it more convenient to use.
complexlex.h:
	Line 95: Same note as 613 in .c

simplelex.c:
	Line 410: This default in numberentry_lex() can technically use a character
		verifier.
	numberentry_lex() drops characters for some number formats- change that.
	Line 621: A note in brackop_lex() that it would be good to verify the value
		of th.toktype.
	Make certain that the inclusive or stuff is properly implemented, instead
		of all being "and" variations...
simplelex.h:
	Need some note on unused vs other chars.

token.h:
	Need some notes on *_INVALID vs *_OTHER

headers.h:
	Need to verify that all the relevant headers are included. Maybe make
		sub-headers for modularity?
	Note: the relevant headers are now definitely NOT up to date.

stack.c:
	Line 183: changed the return values, need to check if this breaks anything.
		Note: have changed A LOT of return values. This SHOULDN'T break things, but it MIGHT. Best to check.
		This file shouldn't have problems- fixing it is part of why there's lots of changes...
	Line 593: There's a note here about verifying the proper use of (token_head*)->length.
	
	New:
	Added an int to stackpair, and several functions to the top of the file.
		This will throw off line numbers. Again.
	Check to see if the new stackpair->run member should be initialized
		anywhere.

tokenmatching.c:
	Line 406: Should this REALLY be fixed instead of deleted? I think I may
		have moved past this.
tokenmatching.h:
	genericnamed_retframe isn't usefully compatible with genname_parr, and
		various functions require genname_parr; look at doing something to
		compensate for that, so that genericnamed_retframe can make itself
		useful. See also generictyped_retframe.


Finally: Finish the whole preprocessor!
