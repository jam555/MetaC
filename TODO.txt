Special note:
	The FAILED * FUNC macros should probably be supplemented with versions that implement the standard assigned-and-if() construct. That will save MANY lines.
	Probably need to check all the files for *_refid variables, and delete them. Caught some, but probably not all.

Aaaand the file is already out of date. Have been using already-defined stuff for the FAILED * FUNC macro note above. So, lots of line numbers below are off...

freshline_directives.c looks likely to just be an older version of exec.c and macroargs.c, so figure out if it should be deleted.

There may be a whole load of stuff that uses MONADICFAILURE() by unknowingly passing it a lib4_failure_result under the mistaken impression that it's an int.


tokenization.txt:
	Needs better documentation of invoke_dealloctoken().

err.c:
	might need some sort of debug/release mode?

demo_errs.c:

lexalike.c:
	any functions left that belong elsewhere?
	has at least one TODO about an old comment- update that comment.
	Needs trigraph support added in.
	tokenize_char() needs to be modified to provide file/line info to allow the
		origin of text to be tracked for error-reporting and macro programming
		purposes.
	The token-queue system has no way to track if or which macro that tokens
		have come from, so that needs to get changed so that we can avoid
		cyclic macro invocations.
lexalike.h:
	Will need to be synced with some lexalike.c changes.
	is_freshline() should be declared elsewhere- move it.
		Actually, is that true?

extrachar.c:
	Needs some changes to support/use the file/line info that needs to be added
		to lexalike.c

source.c:
	When setting ptrres in build_source2(), shouldn't it be sized off of struct
		source instead of stackframe?

basics.c:
	Line 249 has a bit of error reporting that's probably worthy of it's own
		custom error reporter.
	I think that the two/three search functions (preproc_search2(),
		preproc_search1(), and gentyped_search()) should be replaced with
		similar functions that have more thought applied to them. They seem
		like decent references, but not directly suitable for use.

components.h:
	Is the stuff at the bottom of the file supposed to be there?

components.c:
	Starting at line 80, "default" isn't really defined.
	Line 128, searchstack_deinit() isn't filled out at all.
	components_sequencedsearchproceed() has a note saying it needs to be
		reviewed.

macroargs.c:
	This has been freshly split off of components.c- need to go through to
		double check things.
	Pulled the shufflequeue stuff out for an exec.c file.

exec.c:
	Freshly split- needs review.
	Should shufflequeue_macro_run() REALLY pop the list of arguments from
		macro_args? Where does that value even get pushed?
	Does TOKTYPE_TOKENGROUP_MACROCALL execute macros AND directives, or
		just macros? I believe that both SHOULD be done, but that doesn't mean
		that it IS done...
	Also, has support for TOKTYPE_TOKENGROUP_MACROTOKEN_INDIRECTION been added?
	Should "_TOKENGROUP_" be present in the ->toktype names for this file at
		all?
	You know what? Just review the entire damned file.
exec.h:
	The whole file needs to be examined for rewriting.
	Line 107 has a "???" in a struct definition.

freshline_directives.c:
	This frankly hasn't REALLY been written yet. It was a sort-of scratchpad
		for e.g. macroargs.c, because it basically NEEDS some stuff like that
		in order to know how the directives need to work.

complexlex.c:
	Line 159: Apparently I was uncertain about something here. Best to check.
	Line 613: A note about a function set/function that should be built. Might
		be further down in same file already...
	In conclude_accumulate_token(), the else case of
			"if( ( (token_head*)bottom )->toktype ==
			TOKTYPE_TOKENGROUP_EQUIVMERGE )"
		just pushes a uintptr_t back onto the stack- it would be better to
		confirm that instead the "white" token is of *_EQUIVMERGE first, to
		possibly detect stack corruptions.
	accumulate_whitespace() PROBABLY doesn't accumulate comments as whitespace-
		that should probably be changed.
	invoke_dealloctoken() appears to have an inverted test (the handler SHOULD
		BE non-null!), and matching wrong error report.
	smart_dealloc_token() needs to be extended to support TOKTYPE_NUMBER_UINT.
complexlex.h:
	Line 95: Same note as 613 in .c

simplelex.c:
	Line 410: This default in numberentry_lex() can technically use a character
		verifier.
	Line 621: A note in brackop_lex() that it would be good to verify the value
		of th.toktype.
	Make certain that the inclusive or stuff is properly implemented, instead
		of all being "and" variations...
simplelex.h:
	Need some note on unused vs other chars.

token.h:
	Need some notes on *_INVALID vs *_OTHER

headers.h:
	Need to verify that all the relevant headers are included. Maybe make
		sub-headers for modularity?
	Note: the relevant headers are now definitely NOT up to date.

stack.c:
	Line 183: changed the return values, need to check if this breaks anything.
		Note: have changed A LOT of return values. This SHOULDN'T break things, but it MIGHT. Best to check.
		This file shouldn't have problems- fixing it is part of why there's lots of changes...
	Line 593: There's a note here about verifying the proper use of (token_head*)->length.
	
	New:
	Added an int to stackpair, and several functions to the top of the file.
		This will throw off line numbers. Again.
	Check to see if the new stackpair->run member should be initialized
		anywhere.

tokenmatching.c:
	Line 406: Should this REALLY be fixed instead of deleted? I think I may
		have moved past this.
tokenmatching.h:
	genericnamed_retframe isn't usefully compatible with genname_parr, and
		various functions require genname_parr; look at doing something to
		compensate for that, so that genericnamed_retframe can make itself
		useful. See also generictyped_retframe.


Finally: Finish the whole preprocessor!
