
	LIB4_DEFINE_PASCALARRAY_STDDEFINE( prefix, element_type )
		Results in "struct prefix##_pascalarray { len; body[]; };", plus some functions.
		
		prefix##_pascalarray_result res = prefix##_pascalarray_build( size_t len );
		prefix##_pascalarray_result res = prefix##_pascalarray_rebuild( prefix##_pascalarray*, size_t newlen );
		lib4_result res = prefix##_pascalarray_destroy( prefix##_pascalarray* );


	LIB4_MONAD_EITHER_BUILDTYPE_DEFINITION(
		msg_piece_result,
		
		msg_piece,
		lib4_failure_uipresult
	);
	#define MSG_PIECE_RESULT_BUILDSUCCESS( val ) \
		LIB4_MONAD_EITHER_BUILDLEFT( \
			msg_piece_result, msg_piece, (val) \
		)
	#define MSG_PIECE_RESULT_BUILDFAILURE( val ) \
		LIB4_MONAD_EITHER_BUILDRIGHT( \
			msg_piece_result, lib4_failure_uipresult, (val) \
		)
	#define MSG_PIECE_RESULT_BODYMATCH( var, matcha, matchb ) \
		LIB4_MONAD_EITHER_BODYMATCH( var, matcha, matchb )
	#define MSG_PIECE_RESULT_EXPRMATCH( var, matcha, matchb ) \
		LIB4_MONAD_EITHER_EXPRMATCH( var, matcha, matchb )
	#define MSG_PIECE_RESULT_RETURNSUCCESS( val ) \
		LIB4_MONAD_EITHER_RETURNLEFT( \
			msg_piece_result, msg_piece, val )
	#define MSG_PIECE_RESULT_RETURNFAILURE( val ) \
		LIB4_MONAD_EITHER_RETURNRIGHT( \
			msg_piece_result, lib4_failure_uipresult, val )


	LIB4_OP_SETa( val )
	LIB4_OP_SETb( val )
	LIB4_OP_SETc( val )
	LIB4_OP_SETd( val )


		Defines for:
			LIB4_MONAD_EITHER_BUILDTYPE_DEFINITION(
				tokenheadptr_result,

				token_head*,
				uintptr_t
			);
	TOKENHEADPTR_RESULT_BUILDSUCCESS( val )
	TOKENHEADPTR_RESULT_BUILDFAILURE( val )
	TOKENHEADPTR_RESULT_BODYMATCH( var, matcha, matchb )
	TOKENHEADPTR_RESULT_EXPRMATCH( var, matcha, matchb )
	TOKENHEADPTR_RESULT_RETURNSUCCESS( val )
	TOKENHEADPTR_RESULT_RETURNFAILURE( val )


		Builder define for:
			LIB4_DEFINE_PASCALARRAY_STDDEFINE( retframe_, retframe );
			typedef retframe_pascalarray retframe_parr;
	BUILD_RETFRAMEPARR( set )



	stack_ENDRETFRAME( ... ) return( (retframe){ &end_run, (void*)0 } )
	
		/* Old version: STACK_CHECK( stack,  errfunc, errnum,  ... ) */
	STACK_CHECK( stack,  stylesetptr, caller, endfunc )
		/* Old version: STACK_CHECK2( stack, v,  errfunc, errnum,  ... ) */
	STACK_CHECK2( stack, v,  stylesetptr, caller, endfunc )
	
		/* Old version: STACK_PEEK_UINT( stk, offset, var,  errfunc, err1, err2,  ... ) */
	STACK_PEEK_UINT( stk, offset, dest,  stylesetptr, caller, scratch, endfunc )
		/* Old version: STACK_POP_UINT( stk, var,  errfunc, err1, err2,  ... ) */
	STACK_POP_UINT( stk, dest,  stylesetptr, caller, scratch, endfunc )
		/* Old version: STACK_PUSH_UINT( stk, val,  errfunc, err,  ... ) */
	STACK_PUSH_UINT( stk, val,  stylesetptr, caller, scratch, endfunc )
	
	STACK_SWAP_UINT( stk, tmp1, tmp2,  stylesetptr, caller, scratch, endfunc )
	
		/* Old version: CALL_FRAMEFUNC( rethand, retval, fhand, fval ) */
	CALL_FRAMEFUNC( stkpair, rethand, retval, callhand, callval,  stylesetptr, caller, scratch, endfunc )
	RET_FRAMEFUNC( stkpair,  stylesetptr, caller, scratch, endfunc )


		Produces a couple definitions to produce a useful local version of setjump_*()
		for use with longjump_*(). bookmark has to be the name of a uintptr_t variable,
		localname will be a retframe_parr instance for use with enqueue_returns(),
		onset_ptr and onjump_ptr must be compile-time pointers to retframe instances.
	LOCALIZE_SETJUMP( bookmark, prefix, localname,  onset_ptr, onjump_ptr )
