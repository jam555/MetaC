Execution stages:
	on parse
		"_immediate" runs, everything else effectively enueues something else to run, args receive values AFTER this
	on apply (tail-end of parse)
		directives in general run, args receive values BEFORE this
	on invoke (macro invocations, etc.)
		only the "most delayed" things will run during this




close bracket:
	size_t bookmark = token_queue_used();
		Note: use token_queue_fetchlock()
	find directive/identify as macro
		exec the found handler
	recursively process any tokens added to token_queue
		Note: keep an eye out for ->toktype == TOKTYPE_PARSEBREAK, because that means the end of any added tokens has been reached.
	exit bracket handler




accumulate token
if hash
else if name
else if bracket
else if invalid
else




Preprocessor grammar:


name : ??? ;
value : ??? ;
string : ??? ;
symbol : ??? ;
octothorpe : ??? ;

shabang : '#!' ;
newline : '\n' ;

parop : '(" ;
parcl : ')' ;
parupop : '(^' ;
parupcl : '^)' ;
sqrupop : '[^' ;
sqrupcl : '^]' ;
crlupop : '{^' ;
crlupcl : '^}' ;


characters : ??? ;

token:
	name | value | string | symbol | octothorpe |
	shabang |
	parop | parcl | parupop | parupcl | sqrupop | sqrupcl | crlupop | crlupcl |
	??? ;


directive_head : octothorpe name ;
directive : directive_head defframes ;

macro_invocation : name invoke_frame ;


pardef : parupop pardef_body parupcl ;
pardef_body : name | pardef_body ',' name ;

sqrdef : sqrupop sqrdef_body sqrupcl ;
sqrdef_body : name | sqrdef_body ',' name ;

crldef : crlupop crldef_body crlupcl ;
crldef_body : name | crldef_body ',' name ;


defframes : defframe | defframes defframe ;
defframe : pardef | sqrdef | crldef ;



shabang_line : shabang characters newline ;


lines : line | lines line;

line : directive newline | parse_parts newline ;

	/* Note: for these two recipes alone, there is a preference: */
	/*  the closer to the name of the recipe, the more prefered */
	/*  the result. */
parse_parts : macro_invocation | token | parse_parts parse_part ;
parse_part : directive | macro_invocation | token ;


	/* Yes, two shabang lines: the second holds arguments to the */
	/*  preprocessor. */
file : shabang_line shabang_line lines ;

START: file ;
