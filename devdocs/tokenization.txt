token.h:
	
		These types:
			struct token_head
			{
				uintptr_t toktype;
				int length;
				int was_freshline;
				int is_delimited;
			};
			struct token
			{
				token_head header;
				char text[];
			};
			
			LIB4_DEFINE_PASCALARRAY_STDDEFINE( tokenheadptr_, token_head* );
			typedef tokenheadptr_pascalarray tokhdptr_parr;
	... are all in direct support of the token system in general. All of the
	token types start with a token_head instance (e.g. the macro_run type), and
	are differentiated by token_head->toktype. For "leaf" tokens (tokens that
	are literally a packaging of a text token, as opposed to more built-up AST
	members), the "token" structure itself is used, with the toktype indicating
	what category it was assigned to while being lexed (a feature useful for
	both parsing, and extending support to Unicode with it's graphically
	duplicate codepoints...).
	
	
		This value:
			TOKTYPE_INVALID
	... is meant only to ease detection of uninitialized token_head instances,
	though it may be useful for e.g. ASCII escape characters.
	
		These values:
			TOKTYPE_OTHER
			TOKTYPE_SYM_UNKNOWN
	... are meant for characters that otherwise aren't recognized by the
	preprocessor. They're more likely to be useful for Unicode than ASCII, but
	may still be useful for ASCII.
	
		These are some extras:
			TOKTYPE_DOLLAR
			TOKTYPE_GRAVE
	
		These values:
			TOKTYPE_SPACE
			TOKTYPE_NEWLINE
	... are obvious.
	
		This:
			TOKTYPE_NAME
	... is used for things like keywords, function names, etc.
	
		This:
			TOKTYPE_NUMBER
	... is for numbers, but I don't think it supports floating-point yet.
	
		These:
			TOKTYPE_OPCRL
			TOKTYPE_OPSQR
			TOKTYPE_OPPAR
			TOKTYPE_OPCRLUP
			TOKTYPE_OPSQRUP
			
			TOKTYPE_OPPARUP
			TOKTYPE_OPCRLANG
			TOKTYPE_OPSQRANG
			TOKTYPE_OPPARANG
			TOKTYPE_OPCRLCOL
			
			TOKTYPE_OPSQRCOL
			TOKTYPE_OPPARCOL
			TOKTYPE_OPCRLAST
			TOKTYPE_OPSQRAST
			TOKTYPE_OPPARAST
	... are for various types of opener-brackets.
	
		These:
			TOKTYPE_SQSTR
			TOKTYPE_DQSTR
	... are used to dileneate character strings. Other than the question of the
	"exit character", the preprocessor doesn't care which is which.
	
		These:
			TOKTYPE_SYM_COMMENTCL
			TOKTYPE_SYM_COMMENTOP
			TOKTYPE_SYM_COMMENTLINE
	... are the openers and one of the closers (the other is just any newline)
	for comments.
	
		These:
			TOKTYPE_SYM_DECLCASTCLOSE
			TOKTYPE_SYM_ARRCASTCLOSE
			TOKTYPE_SYM_CASTCLOSE
			TOKTYPE_SYM_PRECRLCL
			TOKTYPE_SYM_PRESQRCL
			
			TOKTYPE_SYM_PREPARCL
			TOKTYPE_SYM_COMPTCRLCL
			TOKTYPE_SYM_COMPTSQRCL
			TOKTYPE_SYM_COMPTPARCL
			TOKTYPE_SYM_DECLCRLCL
			
			TOKTYPE_SYM_DECLSQRCL
			TOKTYPE_SYM_DECLPARCL
			TOKTYPE_SYM_CURLYCLOSE
			TOKTYPE_SYM_SQUARECLOSE
			TOKTYPE_SYM_PARENCLOSE
	... are the closing brackets. Their numbers are not contiguous, but instead
	are dispersed according mostly (or perhaps entirely) to their first
	character.
	
		This:
			TOKTYPE_SYM_COLON
	... is the ':' character, while this:
			TOKTYPE_SYM_SCOPE
	... is two contiguous colons.
	
		These:
			TOKTYPE_SYM_QUERY
			TOKTYPE_SYM_CONFUSION
	... are the only uses of the question mark. "Query" is a single question
	mark, and "confusion" is three contiguous question marks.
	
		These:
			TOKTYPE_SYM_DOT
			TOKTYPE_SYM_COMMA
			TOKTYPE_SYM_BSLASH
	... are all single-character tokens, though I'm pretty certain that bslash
	will always be the product of two back slashes and a whitespace character.
	
		Standard comparison operators:
			TOKTYPE_SYM_GREATEQUAL
			TOKTYPE_SYM_GREATERTHAN
			TOKTYPE_SYM_EQUALITY
			TOKTYPE_SYM_NOTEQUAL
			TOKTYPE_SYM_LESSEREQUAL
			TOKTYPE_SYM_LESSERTHAN
	
		Standard logic:
			TOKTYPE_SYM_LOGICAND
			TOKTYPE_SYM_LOGICIOR
	
		Assignment:
			TOKTYPE_SYM_SET
	
		"In-place" operators:
			TOKTYPE_SYM_DECREMENT
			TOKTYPE_SYM_PLACEDSUB
			TOKTYPE_SYM_PLACEDMULT
			TOKTYPE_SYM_PLACEDDIV
			TOKTYPE_SYM_PLACEDXOR
			TOKTYPE_SYM_INCREMENT
			TOKTYPE_SYM_PLACEDADD
			TOKTYPE_SYM_PLACEDMODULO
			TOKTYPE_SYM_PLACEDBINARYAND
			TOKTYPE_SYM_PLACEDBINARYAND
			TOKTYPE_SYM_PLACEDDIVISIVSHIFT
			TOKTYPE_SYM_PLACEDMULTIPLYSHIFT
	
		Standard binary ops:
			TOKTYPE_SYM_ADDITION
			TOKTYPE_SYM_SUBTRACT
			TOKTYPE_SYM_MULTIPLY
			TOKTYPE_SYM_DIVIDE
			TOKTYPE_SYM_MODULO
			TOKTYPE_SYM_XOR
			TOKTYPE_SYM_BINARYAND
			TOKTYPE_SYM_BINARYAND
			TOKTYPE_SYM_DIVISIVSHIFT
			TOKTYPE_SYM_MULTIPYSHIFT
	
		The "@" character:
			TOKTYPE_AT
	... this should never get exposed, as the simplelex.c functions generate it
	only for internal purposes before they convert it to one of:
			TOKTYPE_SYM_ADDROF
			TOKTYPE_SYM_DEREFERENCE
		This is used for array operations:
			TOKTYPE_SYM_ELEMEDDEREF
	
		Inversions:
			TOKTYPE_SYM_NOT
			TOKTYPE_SYM_TILDE
	
		This:
			TOKTYPE_OCTO
	... is the "#" character. It's "octo" from "octothorpe".
	
	
	
	These are used for "complex" "tokens" (really abstract syntax tree nodes):
	
		This value:
			TOKTYPE_TOKENGROUP_SAMEMERGE
	... is used for "tokengroup" instances, and is intended for e.g. contiguous
	whitespace characters, whereas this value:
			TOKTYPE_TOKENGROUP_EQUIVMERGE
	... is used for "tokenbranch" instances, which are innately more complex.
	
		This:
			TOKTYPE_TOKENGROUP_WHITESPACE
	... is a ->subtype value for for contiguous blocks of whitespace in
	particular, used with ->toktype TOKTYPE_TOKENGROUP_SAMEMERGE.
	
		These two:
			TOKTYPE_TOKENGROUP_STRMERGE
			TOKTYPE_TOKENGROUP_COMNTMERGE
	... are ->subtype values used with ->toktype TOKTYPE_TOKENGROUP_EQUIVMERGE.
	The ->body member is all that really matters for these, as the subtype says
	all the rest.
	
		This:
			TOKTYPE_TOKENGROUP_DELIMITED
	... SEEMS not to be used, and may be legacy of early explorations of how to
	deal with the backslash character; a character which, in the lexing stage,
	is now handled before tokenization even happens, rendering this
	unimportant. But maybe it'll be useful later.
	
	
	
	These are used in metaCpreproc/exec.c to differentiate the different types
	of macro behavior. I suspect that "TOKENGROUP" should be removed from these
	names...
	
		This:
			TOKTYPE_TOKENGROUP_MACROTOKEN
	... marks a "hardcoded" token insertion.
	
		This:
			TOKTYPE_TOKENGROUP_MACROLINK
	... is semi-hardcoded, as it refers to a specific argument to the currently
	executing macro, instead of trying to calculate a value.
	
		This:
			TOKTYPE_TOKENGROUP_MACROCALL
	... is PROBABLY used to encode the execution of both macros and directives,
	but I'm not actually certain about the directives: I need to check that.
	
		These:
			TOKTYPE_TOKENGROUP_MACRORUN
			TOKTYPE_TOKENGROUP_MACRODIRECTIVE
	... mark the types that hold macro & directive instructions. Which is which
	should be fairly obvious.
	
		This:
			TOKTYPE_TOKENGROUP_MACROTOKEN_INDIRECTION
	... is almost guaranteed to be unused. It's supposed to be
	TOKTYPE_TOKENGROUP_MACROTOKEN, but with a "firewall" to block deallocation.
	It probably isn't currently supported (though it ideally should be), and
	I'm not certain that it COULD be needed: I think I moved to a "the macro
	holds copies of every token it needs" model...

simplelex.h:
	
		This function:
			retframe head_lex( stackpair *stkp, void *v );
	... will result in a single token being lexed from the extrachar functions,
	and stored on the stack, with it's token_head on top of the individual
	characters. You should in general use getANDassemble_token() from
	input/lexalike.h, as that's intended to both call this, AND fully transfer
	the token into a stand-alone instance of "struct token"- note that
	getANDassemble_token() is currently broken, and basically needs a ~2 line
	fix to get it to do it's job...
	
	While there are other functions, they are frankly just used by head_lex(),
	and there's in general no point to calling them.

complexlex.h:
	
		These functions:
			retframe set_dealloctoken( retframe dealc_ );
			retframe invoke_dealloctoken( stackpair *stkp, void *v );
	... provide a token deallocation facility. If you want to use a custom
	version, then you can use:
			smart_dealloc_token()
	... as a fall-back for standard token types.
	
	
	
		These types:
			struct tokengroup
			{
				token_head header;
				uintptr_t subtype;
				
				tokhdptr_parr *arr;
				size_t used;
			};
			struct tokenbranch
			{
				token_head header;
				uintptr_t subtype;
				
				token_head *lead, *body, *tail;
			};
	... are used with the TOKTYPE_TOKENGROUP_* values defined in token.h.
	tokengroup is used to hold groups of tokens that should be treated
	equivalently to each other (e.g. to group up a bunch of whitespace),
	whereas tokenbranch is used to apply some structure to the relations
	between different tokens (e.g. to express that a set of tokens are wrapped
	in parentheses). In both cases, ->header.toktype holds a value in some way
	identifying of the structure type, while ->subtype holds a value
	identifying the "meaning" of the tokens contained by the structure.
	
		These functions:
			tokengroup* build_tokengroup( size_t elems );
			int regrow_tokengroup
			(
				tokengroup *tgrp,
				size_t newlen
			);
			int pushto_tokengroup
			(
				tokengroup *tgrp,
				token_head *thd
			);
			int place_tokenhead( token_head **dest, token_head *tok );
			retframe dealloc_tokengroup
			(
				stackpair *stkp, void *v,
				tokengroup *tgrp
			);
	... provide low-level operations for tokengroup instances.
		pushto_tokengroup() places "thd" at the tail of the used space.
		place_tokenhead() will either store "tok" into "*dest" (if *dest is
	null), or call pushto_tokengroup() with "tok" as the "thd" value (if
	"*dest" points to a tokengroup instance already), or will store both
	"*dest" and "tok" (in that order!) into a new tokengroup instance, and
	store a pointer to that new instance into "*dest".
		The action of the other functions should be sufficiently obvious from
	their names.
	
		These functions:
			tokenbranch* build_tokenbranch( size_t elems );
			int set_lead_tokenbranch( tokenbranch *tb, token_head *tok );
			int push_body_tokenbranch( tokenbranch *tb, token_head *tok );
			int set_tail_tokenbranch( tokenbranch *tb, token_head *tok );
			retframe dealloc_tokenbranch
			(
				stackpair *stkp, void *v,
				tokenbranch *tb
			);
	... provide low-level operations for tokenbranch instances. They should all
	be obvious from their names.
	
	
		This function:
			retframe accumulate_whitespace( stackpair *stkp, void *v );
	... requires two pointers to token_head-lead objects on top of the stack
	(but the one on top must NOT be a tokengroup or tokenbranch), and will
	return with a similar or equal pointer on the stack.
		If the top token is not a whitespace then it's pointer will remain on
	top of the stack and the function will return without doing anything (or at
	least anything that isn't reversed). If the next-to-top token is neither a
	whitespace (TOKTYPE_SPACE, TOKTYPE_NEWLINE, or TOKTYPE_OTHER toktype) token
	nor a tokengroup of whitespace then it will remain on the stack.
		If the top-most token is a whitespace token then it (preceeded by the
	next-to-top token if that is either an individual or group-of whitespace
	tokens) will be packaged into a whitespace tokengroup by place_tokenhead(),
	a pointer to which tokengroup will be placed on the stack, and a
	getANDassemble_token()/accumulate_whitespace() loop will run until the
	token placed on top of the stack by getANDassemble_token() is not a
	whitespace token. Note that if the initial next-to-top token is whitespace
	in this scenario, then place_tokenhead() will only leave it on the stack in
	the form of the final whitespace tokengroup.
	
	
		This function:
			retframe accumulate_token( stackpair *stkp, void *v );
	... packages tokens up with their immediately trailing whitespace, so that
	the whitespace is tracked without necessarily being in the way.
		It expects a pointer to a token on top of the stack (though there needs
	to be TWO instead of just one...). It will peek at that token's type,
	tail-calling to accumulate_whitespace() if the token is whitespace (hence
	two token pointers...), and otherwise storing the token pointer into a new
	tokenbranch, swapping the token pointer on the stack for a pointer to the
	new tokenbranch, pushing a return to conclude_accumulate_token() onto the
	return stack, and then returning to accumulate_whitespace() via
	getANDassemble_token().
		When conclude_accumulate_token() eventually is returned into, it'll
	attempt to move the next-to-top token pointer into the tail slot of the
	tokenbranch (which SHOULD only fail if there was no whitespace at all...),
	before pushing whatever was at the TOP of the stack back on top, and
	returning. It is worth noting that in the "no whitespace" case,
	conclude_accumulate_token() ALSO requires a "padding" token pointer to be
	underneath the one that accumulate_token() requires.
